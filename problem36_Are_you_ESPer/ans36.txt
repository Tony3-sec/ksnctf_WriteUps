esp is 32bit ELF binary and does following:

1. Generates random number between 0 and 9 (seed is current time)
2. Compares random number and user input. If the input is correct, prints "Correct!", if small prints "Too small", if large prints "Too large". You need to get correct answer 20 times.
3. If you successfully finish challenge, the program reads flag from "/home/q36/flag.txt"

The program uses current time as a seed for srand() and generates random number via rand
The seed is current times so it is predictable. If you can analyze the randomization routine then you can predict all random digits. 

Below is code to generate random number:

'''
.text:080482CC C7 04 24 00 00 00 00    mov     dword ptr [esp], 0
.text:080482D3 E8 A8 35 02 00          call    time            ; get current time
.text:080482D8 89 04 24                mov     [esp], eax
.text:080482DB E8 E0 CB 00 00          call    srandom         ; feed current time as seed
.text:080482E0 C7 44 24 1C 00 00 00 00 mov     dword ptr [esp+1Ch], 0
.text:080482E8 E8 A3 D1 00 00          call    rand
.text:080482ED 89 C1                   mov     ecx, eax
.text:080482EF B8 67 66 66 66          mov     eax, 66666667h
.text:080482F4 F7 E9                   imul    ecx             ; ecx * eax, most signficant 4bytes will be stored at edx and least significant 4bytes will be stored at eax
.text:080482F6 89 C8                   mov     eax, ecx
.text:080482F8 C1 F8 1F                sar     eax, 1Fh
.text:080482FB 89 D7                   mov     edi, edx
.text:080482FD 8B 54 24 1C             mov     edx, [esp+1Ch]  ; counter
.text:08048301 C1 FF 02                sar     edi, 2
.text:08048304 29 C7                   sub     edi, eax
.text:08048306 8D 3C BF                lea     edi, [edi+edi*4]
.text:08048309 8B 04 95 60 B2 0B 08    mov     eax, ds:_ZZ4mainE1C[edx*4] ; main::C
.text:08048310 01 FF                   add     edi, edi
.text:08048312 29 F9                   sub     ecx, edi
.text:08048314 85 C0                   test    eax, eax
.text:08048316 7F 28                   jg      short loc_8048340
'''

The program generates random number by rand function and performs further bitwise operations like multiply by 0x66666667, right shift, perform AND, add number, subtract numbers.. and so on.

I wrote following C program to generate answer digits:

'''
#include <stdio.h>
#include <stdlib.h>
#include <time.h> 
#include <stdint.h>

int main()
{
	srand(time(NULL));
	int i;
	for (i = 0; i<20; i++) {
		//int eax = rand();
		uint32_t ecx = rand();
		uint32_t hardcoded_value = 1717986919; //0x66666667
		uint64_t edx = (uint64_t) ecx * hardcoded_value;
		uint32_t msb = (edx >> 32) & 0xffffffff;
		//printf("msb: %d\n", msb);
		uint32_t eax = ecx >> 31;
		uint32_t edi = msb;
		edi = edi >> 2;
		edi = edi - eax;
		edi = edi + edi * 4;
		edi = edi + edi;
		uint32_t randint = ecx - edi;
		//printf("randint: %d\n", randint);
		printf("%d\n", randint);
	}
	return 0;
}
'''

Compile above program and send the answer to remote server

'''
./answer.out | nc ctfq.sweetduet.info 10777
'''

Theoretically, the above program should give us a flag but it didn't. This is because the system clock for ctfq.sweetduet.info has some gap. You can check system clock for ctfq.sweetduet.info by SSHing to the server and run date command.

'''
ssh -p 10022 q4@ctfq.sweetduet.info
Pass: q60SIMpLlej9eq49
''' 

Above login info can be found at challenge "Villager A" (http://ksnctf.sweetduet.info/problem/4)

At the time of this writing the system clock for ctfq.sweetduet.info was about 12060 seconds ahead compared to my local system.

I tweaked my program as follows:

'''
#include <stdio.h>
#include <stdlib.h>
#include <time.h> 
#include <stdint.h>

int main(int argc, char *argv[])
{
	//srand(time(NULL));
	srand(time(NULL) + atoi(argv[1])); //need to get exact current time as remote server
	//the system clock for ctfq.sweetduet.info was about 12061 seconds ahead at the time of solving
	int i;
	for (i = 0; i<20; i++) {
		//int eax = rand();
		uint32_t ecx = rand();
		uint32_t hardcoded_value = 1717986919; //0x66666667
		uint64_t edx = (uint64_t) ecx * hardcoded_value;
		uint32_t msb = (edx >> 32) & 0xffffffff;
		//printf("msb: %d\n", msb);
		uint32_t eax = ecx >> 31;
		uint32_t edi = msb;
		edi = edi >> 2;
		edi = edi - eax;
		edi = edi + edi * 4;
		edi = edi + edi;
		uint32_t randint = ecx - edi;
		//printf("randint: %d\n", randint);
		printf("%d\n", randint);
	}
	return 0;
}
'''

And the wrote following bash script to bruteforce the collect system time:

'''
#!/bin/bash

for i in {12000..12100};
do
	./answer.out $i | nc ctfq.sweetduet.info 10777
	echo $i 
done
'''

Got flag.

'''
Level 1/20, Challenge 1/10
? Correct!

Level 2/20, Challenge 1/8
? Correct!

Level 3/20, Challenge 1/6
? Correct!

Level 4/20, Challenge 1/4
? Correct!

Level 5/20, Challenge 1/2
? Correct!

Level 6/20, Challenge 1/1
? Correct!

Level 7/20, Challenge 1/1
? Correct!

Level 8/20, Challenge 1/1
? Correct!

Level 9/20, Challenge 1/1
? Correct!

Level 10/20, Challenge 1/1
? Correct!

Level 11/20, Challenge 1/1
? Correct!

Level 12/20, Challenge 1/1
? Correct!

Level 13/20, Challenge 1/1
? Correct!

Level 14/20, Challenge 1/1
? Correct!

Level 15/20, Challenge 1/1
? Correct!

Level 16/20, Challenge 1/1
? Correct!

Level 17/20, Challenge 1/1
? Correct!

Level 18/20, Challenge 1/1
? Correct!

Level 19/20, Challenge 1/1
? Correct!

Level 20/20, Challenge 1/1
? Correct!

Congratulations!
FLAG_Xmh3xVEXQ7zwTwkT
'''