## try & error

curl -F "id=foo?" -F "password=bar?" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -F "id=123" -F "password=123" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -F "id=foo" -F "password=hoge" -F "id=bar" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -F "id=foo&password=bar" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id=foo&password=bar" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id=foo&id=foo2&password=bar&password=bar2" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=foo&password[]=bar" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id=foo&password=bar&alter=param" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=0&password[]=0" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=0&password[]=0&foo[]=0&bar[]=0" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=NULL&password[]=NULL" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "foo[]=tatsu&bar[]=tatsu" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id=NULL&password=NULL" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=array('Johonathan')&password[]=array('Joseph')" http://ctfq.sweetduet.info:10080/~q35/auth.php

curl -d "id[]=array('id' => 'Johonathan')&password[]=array('password' => 'Joseph')" http://ctfq.sweetduet.info:10080/~q35/auth.php

## Reference
http://www.tokumaru.org/d/20090924.html#p01
http://blog.a-way-out.net/blog/2013/12/15/pdo-prepare-statement-numeric-literal/
http://php.net/manual/ja/types.comparisons.php


$ curl -I http://ctfq.sweetduet.info:10080/~q35/auth.phpHTTP/1.1 200 OK
Date: Wed, 03 Feb 2016 15:13:55 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.3.3
Connection: close
Content-Type: text/html; charset=UTF-8

## From PDOStatement::execute in php manual

input_parameters
An array of values with as many elements as there are bound parameters in the SQL statement being executed. All values are treated as PDO::PARAM_STR.

You cannot bind multiple values to a single parameter; for example, you cannot bind two values to a single named parameter in an IN() clause.

You cannot bind more values than specified; if more keys exist in input_parameters than in the SQL specified in the PDO::prepare(), then the statement will fail and an error is emitted.