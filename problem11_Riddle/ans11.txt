Riddle.exe is 32bit Windows executable file. When I executed the file, it asked the following riddles:

1. Which creature in the morning goes on four feet, at noon on two, and in the evening upon three?
2. What is the largest island in the world?
3. Answer to the Ultimate Question of Life, The Universe, and Everything.
4. What is the flag?

The answers for each riddles are:

1. Human
2. Greenland
3. 42
4. A valid flag

None of the above answers are hard coded in plain text.

I opened the file with IDA and found the following interesting data in .data section which are answers for riddle in encrypted format:

The byte length is 5bytes which matches with "Human" so this is likely "Human" in encrypted format
'''
.data:0040517C unk_40517C      db 0B1h ; ±             ; DATA XREF: riddle_401980+6F↑o
.data:0040517D                 db 0C6h ; Æ
.data:0040517E                 db  37h ; 7
.data:0040517F                 db  2Bh ; +
.data:00405180                 db  76h ; v
'''

The byte length is 9bytes which matches with "Greenland" so this is likely "Greenland" in encrypted format
'''
.data:004051A4                 db 0BEh ; ¾
.data:004051A5                 db 0C1h ; Á
.data:004051A6                 db  3Fh ; ?
.data:004051A7                 db  2Fh ; /
.data:004051A8                 db  76h ; v
.data:004051A9                 db  86h ; †
.data:004051AA                 db  3Ch ; <
.data:004051AB                 db  58h ; X
.data:004051AC                 db 0FDh ; ý
'''

The byte length is 2bytes which matches with "42" so this is likely "42" in encrypted format
'''
.data:004051CC                 db 0CDh ; Í
.data:004051CD                 db  81h
'''

The byte length is 21bytes so this is likely a flag in encrypted format (flag for ksnctf is usually 21bytes)
'''
.data:004051F4                 db 0BFh ; ¿
.data:004051F5                 db 0FFh ; ÿ
.data:004051F6                 db  1Bh
.data:004051F7                 db  0Dh
.data:004051F8                 db  47h ; G
.data:004051F9                 db 0A7h ; §
.data:004051FA                 db  18h
.data:004051FB                 db  4Fh ; O
.data:004051FC                 db 0CBh ; Ë
.data:004051FD                 db 0D6h ; Ö
.data:004051FE                 db  5Ch ; \
.data:004051FF                 db  59h ; Y
.data:00405200                 db  95h ; •
.data:00405201                 db  61h ; a
.data:00405202                 db  73h ; s
.data:00405203                 db  57h ; W
.data:00405204                 db 0B3h ; ³
.data:00405205                 db 0D1h ; Ñ
.data:00405206                 db  94h ; ”
.data:00405207                 db  9Fh ; Ÿ
.data:00405208                 db 0ACh ; ¬
'''

I eventually found a function which seems to perform riddle answer validation at the address 0x4017D0
'''
.text:004019E3 57                      push    edi
.text:004019E4 50                      push    eax             ; contains user input
.text:004019E5 E8 E6 FD FF FF          call    answerValidation_4017D0
'''

I examined the function and found interesting XOR operation at 0x401963

'''
.text:00401927                         loc_401927:
.text:00401927 FE C2                   inc     dl
.text:00401929 0F B6 F2                movzx   esi, dl
.text:0040192C 8A 8E 78 55 40 00       mov     cl, byte_405578[esi]
.text:00401932 02 D9                   add     bl, cl
.text:00401934 0F B6 FB                movzx   edi, bl
.text:00401937 88 5D FF                mov     [ebp+var_1], bl
.text:0040193A 0F B6 9F 78 55 40 00    movzx   ebx, byte_405578[edi]
.text:00401941 88 9E 78 55 40 00       mov     byte_405578[esi], bl
.text:00401947 88 8F 78 55 40 00       mov     byte_405578[edi], cl
.text:0040194D 0F B6 9E 78 55 40 00    movzx   ebx, byte_405578[esi]
.text:00401954 8B 75 08                mov     esi, [ebp+arg_0]
.text:00401957 02 D9                   add     bl, cl
.text:00401959 0F B6 CB                movzx   ecx, bl
.text:0040195C 0F B6 89 78 55 40 00    movzx   ecx, byte_405578[ecx]
.text:00401963 30 0C 30                xor     [eax+esi], cl   ; CL contains XOR key
.text:00401966 40                      inc     eax
.text:00401967 3B 45 0C                cmp     eax, [ebp+arg_4]
.text:0040196A 7C B8                   jl      short loc_401924
'''

I debugged the above code with OllyDbg and identified that it performs XOR operation against user input with XOR key stored in CL. I set break point at 0x401963 and examined the value stored in CL. Review on CL revealed the following XOR key was used for XOR against flag:

'''
0xF9B35A4A18EA5D3699E2063FA120471FF586A3ACC7
'''

I already know that XOR encrypted flag is 0xBFFF1B0D47A7184FCBD65C5995617357B3D1949FAC so I can XOR decrypt the flag using the above mentioned XOR key. I wrote the following python script to decrypt the flag:

'''
#!/usr/bin/env python

'''
This script will XOR the data. 
The key and the payload must be in hex format
Simplified the code from my_xor.py
'''

import binascii

#encrypted flag: 0xBFFF1B0D47A7184FCBD65C5995617357B3D1949FAC
#XOR key: 0xF9B35A4A18EA5D3699E2063FA120471FF586A3ACC7

enc = "BFFF1B0D47A7184FCBD65C5995617357B3D1949FAC"
key = "F9B35A4A18EA5D3699E2063FA120471FF586A3ACC7"
dec = ""

n = 2

## if key is single byte
if ( (len(key) / 2) == 1):
	m = 0
	for i in range(0, len(enc), n):
		dec += hex(int(enc[i:i+n], 16) ^ int(key[m:m+n], 16)).replace('0x', '').zfill(2)
else:
	m = 0
	for i in range(0, len(enc), n):
		dec += hex(int(enc[i:i+n], 16) ^ int(key[m:m+n], 16)).replace('0x', '').zfill(2)
		m += n
		## if the key gets to end, set the key back to beginning.
		if (m >= len(key)):
			m = 0

print(dec)
#dec = dec.replace('0d0d', '0d0a') ## not sure why but when hex contains '0d0d' it doesn't print properly so replacing to '0d0a'
#print(binascii.unhexlify(dec))
print(repr(binascii.unhexlify(dec)))
print("")
'''
464c41475f4d457952345a6634413448465737336b
'FLAG_MEyR4Zf4A4HFW73k'
'''
'''

Got the flag.

'''
$ python riddle-flag-decryptor.py
464c41475f4d457952345a6634413448465737336b
'FLAG_MEyR4Zf4A4HFW73k'
'''